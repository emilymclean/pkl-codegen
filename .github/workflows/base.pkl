open module base
extends "package://github.com/emilymclean/pkl-github-actions/releases/download/v0.1.0-alpha.96/pkl-github-actions@0.1.0-alpha.96#/actions.pkl"

hidden supportedVersionLimit = 10

hidden platformCalls = new Mapping {
    ["swift"] = "LD_LIBRARY_PATH=/usr/share/swift/usr/lib/swift/linux PATH=$PATH:/usr/share/swift/usr/bin/ /pkl-gen-swift"
    ["kotlin"] = "java -cp /pklgen.jar org.pkl.codegen.kotlin.Main"
    ["java"] = "java -cp /pklgen.jar org.pkl.codegen.java.Main"
    ["doc"] = "java -cp /pklgen.jar org.pkl.doc.Main"
}

hidden checkout = new ActionStep {
    uses = "actions/checkout@v3"
    with = new Mapping {
        ["fetch-depth"] = 0
    }
}

function currentVersion(): Step = new CommandStep {
    name = "Get current latest supported pkl version"
    run = """
    mapfile -t pklversions < "pkl-versions"
    echo "PKL_VERSION=${pklversions[-1]}" >> $GITHUB_ENV
    """
}

function dockerBuild(withM: Mapping, ifStatement: String?): Listing<Step> = new Listing {
    new ActionStep {
        name = "Build and push Docker image"
        uses = "docker/build-push-action@v4"
        `if` = ifStatement
        with = withM
    }
}

function dockerSetup(): Listing<Step> = new Listing {
    new ActionStep {
        name = "Setup QEMU"
        uses = "docker/setup-qemu-action@v2"
    }
    new ActionStep {
        name = "Setup Docker Buildx"
        uses = "docker/setup-buildx-action@v2"
    }
    new ActionStep {
        name = "Log in to the Container registry"
        uses = "docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9"
        with = new Mapping {
            ["registry"] = "https://ghcr.io"
            ["username"] = "${{ github.actor }}"
            ["password"] = "${{ secrets.GITHUB_TOKEN }}"
        }
    }
}

function renderForPlatform(platform: String, version: String): Listing<Step> = new Listing {
    if (platform == "swift")
        new CommandStep {
            name = "Read swift-tool-version"
            run = """
            echo "swift_tool_version=$(cat swift/swift-tool-version)"
            """
        }
    else 
        null 
    if (platform == "swift")
        new ActionStep {
            name = "Render template.Dockerfile"
            uses = "recih/template-render-action@v1.0.2"
            env = new Mapping {
                ["pkl_version"] = version
            }
            with = new Mapping {
                ["template-file"] = "swift/template.Dockerfile"
                ["output-file"] = "swift/Dockerfile"
                ["engine"] = "mustache"
            }
        } 
    else
        new ActionStep {
            name = "Render build.template.gradle"
            uses = "recih/template-render-action@v1.0.2"
            env = new Mapping {
                ["pkl_version"] = version
            }
            with = new Mapping {
                ["template-file"] = "\(platform)/project/build.template.gradle"
                ["output-file"] = "\(platform)/project/build.gradle"
                ["engine"] = "mustache"
            }
        }
    new ActionStep {
        name = "Render endpoint.sh"
        uses = "recih/template-render-action@v1.0.2"
        env = new Mapping {
            ["call"] = platformCalls[platform]
        }
        with = new Mapping {
            ["template-file"] = "templates/entrypoint.template.sh"
            ["output-file"] = "\(platform)/entrypoint.sh"
            ["engine"] = "mustache"
        }
    }
    new CommandStep {
        name = "Make endpoint.sh executable"
        run = "chmod +x \(platform)/entrypoint.sh"
    }
}.toList().filterNonNull().toListing()