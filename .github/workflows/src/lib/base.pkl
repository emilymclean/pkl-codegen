open module base
extends "package://github.com/emilymclean/pkl-github-actions/releases/download/v0.1.0-alpha.96/pkl-github-actions@0.1.0-alpha.96#/actions.pkl"
import "../actions/checkout.pkl" as actions_checkout
import "../actions/template-render-action.pkl" as actions_template_render_action
import "../actions/login-action.pkl" as actions_login_action
import "../actions/setup-buildx-action.pkl" as actions_setup_buildx_action
import "../actions/setup-qemu-action.pkl" as actions_setup_qemu_action
import "../actions/build-push-action.pkl" as actions_build_push_action

hidden const PLATFORM_JAVA = "java"
hidden const PLATFORM_KOTLIN = "kotlin"
hidden const PLATFORM_SWIFT = "swift"
hidden const PLATFORM_PKLDOC = "doc"
hidden const PLATFORM_GO = "go"

typealias Platform = "java"|"kotlin"|"swift"|"doc"|"go"

hidden const PLATFORMS = new Listing {
    PLATFORM_JAVA
    PLATFORM_KOTLIN
    PLATFORM_PKLDOC 
    PLATFORM_SWIFT
    PLATFORM_GO
}

hidden supportedVersionLimit = 10

hidden platformCalls = new Mapping<Platform, String> {
    [PLATFORM_SWIFT] = "LD_LIBRARY_PATH=/usr/share/swift/usr/lib/swift/linux PATH=$PATH:/usr/share/swift/usr/bin/ /pkl-gen-swift"
    [PLATFORM_KOTLIN] = "java -cp /pklgen.jar org.pkl.codegen.kotlin.Main"
    [PLATFORM_JAVA] = "java -cp /pklgen.jar org.pkl.codegen.java.Main"
    [PLATFORM_PKLDOC] = "java -cp /pklgen.jar org.pkl.doc.Main"
}

hidden checkout = new actions_checkout.Step {
    inputs = new actions_checkout.ActionInput {
        fetchDepth = 0
    }
}.github_actions

hidden currentVersion: Step = new CommandStep {
    name = "Get current latest supported pkl version"
    run = """
    mapfile -t pklversions < "pkl-versions"
    echo "PKL_VERSION=${pklversions[-1]}" >> $GITHUB_ENV
    """
}

function dockerBuild(_inputs: actions_build_push_action.ActionInput, ifStatement: String?): Listing<Step> = new Listing {
    new actions_build_push_action.Step {
        name = "Build and push Docker image"
        `if` = ifStatement
        inputs = _inputs
    }.github_actions
}

function dockerSetup(): Listing<Step> = new Listing {
    new actions_setup_qemu_action.Step {
        name = "Setup QEMU"
    }.github_actions
    new actions_setup_buildx_action.Step {
        name = "Setup Docker Buildx"
    }.github_actions
    new actions_login_action.Step {
        name = "Log in to the Container registry"
        inputs = new actions_login_action.ActionInput {
            registry = "https://ghcr.io"
            username = "${{ github.actor }}"
            password = "${{ secrets.GITHUB_TOKEN }}"
        }
    }.github_actions
}

function renderForPlatform(platform: Platform, version: String): Listing<Step> = new Listing {
    // Please apple, let me use list expansion as the result of an if
    if (platform == PLATFORM_SWIFT)
        new CommandStep {
            name = "Read swift-tool-version"
            run = """
            echo "swift_tool_version=$(cat swift/swift-tool-version)" >> $GITHUB_ENV
            """
        }
    else null
    if (platform == PLATFORM_GO)
        new CommandStep {
            name = "Read go-tool-version"
            run = """
            echo "go_tool_version=$(cat go/go-tool-version)" >> $GITHUB_ENV
            """
        }
    else null
    if (List(PLATFORM_GO).contains(platform))
        new actions_template_render_action.Step {
            name = "Render template.Dockerfile"
            env = new Mapping {
                ["pkl_version"] = version
            }
            inputs = new actions_template_render_action.ActionInput {
                templateFile = "\(platform)/template.Dockerfile"
                outputFile = "\(platform)/Dockerfile"
                engine = "mustache"
            }
        }.github_actions
    else null
    if (List(PLATFORM_GO, PLATFORM_SWIFT).contains(platform))
        new actions_template_render_action.Step {
            name = "Render setup.template.sh"
            env = new Mapping {
                ["pkl_version"] = version
            }
            inputs = new actions_template_render_action.ActionInput {
                templateFile = "\(platform)/setup.template.sh"
                outputFile = "\(platform)/setup.sh"
                engine = "mustache"
            }
        }.github_actions
    else null
    if (List(PLATFORM_GO, PLATFORM_SWIFT).contains(platform))
        new CommandStep {
            name = "Make setup.sh executable"
            run = "chmod +x \(platform)/setup.sh"
        }
    else null
    if (!List(PLATFORM_GO, PLATFORM_SWIFT).contains(platform))
        new actions_template_render_action.Step {
            name = "Render build.template.gradle"
            env = new Mapping {
                ["pkl_version"] = version
            }
            inputs = new actions_template_render_action.ActionInput {
                templateFile = "\(platform)/project/build.template.gradle"
                outputFile = "\(platform)/project/build.gradle"
                engine = "mustache"
            }
        }.github_actions
    else null
    if (platform != PLATFORM_GO)
        new actions_template_render_action.Step {
            name = "Render endpoint.sh"
            env = new Mapping {
                ["call"] = platformCalls[platform]
            }
            inputs = new actions_template_render_action.ActionInput {
                templateFile = "templates/entrypoint.template.sh"
                outputFile = "\(platform)/entrypoint.sh"
                engine = "mustache"
            }
        }.github_actions
    else null
    if (platform != PLATFORM_GO)
        new CommandStep {
            name = "Make endpoint.sh executable"
            run = "chmod +x \(platform)/entrypoint.sh"
        }
    else null
}.toList().filterNonNull().toListing()