open module base
extends "package://github.com/emilymclean/pkl-github-actions/releases/download/v0.1.0-alpha.96/pkl-github-actions@0.1.0-alpha.96#/actions.pkl"

hidden const PLATFORM_JAVA = "java"
hidden const PLATFORM_KOTLIN = "kotlin"
hidden const PLATFORM_SWIFT = "swift"
hidden const PLATFORM_PKLDOC = "doc"
hidden const PLATFORM_GO = "go"

hidden const RENDER_TEMPLATE_ACTION = "emilymclean/template-render-action@v1.0.2"

typealias Platform = "java"|"kotlin"|"swift"|"doc"|"go"

hidden const PLATFORMS = new Listing {
    PLATFORM_JAVA
    PLATFORM_KOTLIN
    PLATFORM_PKLDOC 
    PLATFORM_SWIFT
    PLATFORM_GO
}

hidden supportedVersionLimit = 10

hidden platformCalls = new Mapping<Platform, String> {
    [PLATFORM_SWIFT] = "LD_LIBRARY_PATH=/usr/share/swift/usr/lib/swift/linux PATH=$PATH:/usr/share/swift/usr/bin/ /pkl-gen-swift"
    [PLATFORM_KOTLIN] = "java -cp /pklgen.jar org.pkl.codegen.kotlin.Main"
    [PLATFORM_JAVA] = "java -cp /pklgen.jar org.pkl.codegen.java.Main"
    [PLATFORM_PKLDOC] = "java -cp /pklgen.jar org.pkl.doc.Main"
}

hidden checkout = new ActionStep {
    uses = "actions/checkout@v4"
    with = new Mapping {
        ["fetch-depth"] = 0
    }
}

hidden currentVersion: Step = new CommandStep {
    name = "Get current latest supported pkl version"
    run = """
    mapfile -t pklversions < "pkl-versions"
    echo "PKL_VERSION=${pklversions[-1]}" >> $GITHUB_ENV
    """
}

function dockerBuild(withM: Mapping, ifStatement: String?): Listing<Step> = new Listing {
    new ActionStep {
        name = "Build and push Docker image"
        uses = "docker/build-push-action@v4"
        `if` = ifStatement
        with = withM
    }
}

function dockerSetup(): Listing<Step> = new Listing {
    new ActionStep {
        name = "Setup QEMU"
        uses = "docker/setup-qemu-action@v3"
    }
    new ActionStep {
        name = "Setup Docker Buildx"
        uses = "docker/setup-buildx-action@v3"
    }
    new ActionStep {
        name = "Log in to the Container registry"
        uses = "docker/login-action@v3"
        with = new Mapping {
            ["registry"] = "https://ghcr.io"
            ["username"] = "${{ github.actor }}"
            ["password"] = "${{ secrets.GITHUB_TOKEN }}"
        }
    }
}

function renderForPlatform(platform: Platform, version: String): Listing<Step> = new Listing {
    // Please apple, let me use list expansion as the result of an if
    if (platform == PLATFORM_SWIFT)
        new CommandStep {
            name = "Read swift-tool-version"
            run = """
            echo "swift_tool_version=$(cat swift/swift-tool-version)" >> $GITHUB_ENV
            """
        }
    else null
    if (platform == PLATFORM_GO)
        new CommandStep {
            name = "Read go-tool-version"
            run = """
            echo "go_tool_version=$(cat go/go-tool-version)" >> $GITHUB_ENV
            """
        }
    else null
    if (List(PLATFORM_GO).contains(platform))
        new ActionStep {
            name = "Render template.Dockerfile"
            uses = RENDER_TEMPLATE_ACTION
            env = new Mapping {
                ["pkl_version"] = version
            }
            with = new Mapping {
                ["template-file"] = "\(platform)/template.Dockerfile"
                ["output-file"] = "\(platform)/Dockerfile"
                ["engine"] = "mustache"
            }
        }
    else null
    if (List(PLATFORM_GO, PLATFORM_SWIFT).contains(platform))
        new ActionStep {
            name = "Render setup.template.sh"
            uses = RENDER_TEMPLATE_ACTION
            env = new Mapping {
                ["pkl_version"] = version
            }
            with = new Mapping {
                ["template-file"] = "\(platform)/setup.template.sh"
                ["output-file"] = "\(platform)/setup.sh"
                ["engine"] = "mustache"
            }
        }
    else null
    if (List(PLATFORM_GO, PLATFORM_SWIFT).contains(platform))
        new CommandStep {
            name = "Make setup.sh executable"
            run = "chmod +x \(platform)/setup.sh"
        }
    else null
    if (!List(PLATFORM_GO, PLATFORM_SWIFT).contains(platform))
        new ActionStep {
            name = "Render build.template.gradle"
            uses = RENDER_TEMPLATE_ACTION
            env = new Mapping {
                ["pkl_version"] = version
            }
            with = new Mapping {
                ["template-file"] = "\(platform)/project/build.template.gradle"
                ["output-file"] = "\(platform)/project/build.gradle"
                ["engine"] = "mustache"
            }
        }
    else null
    if (platform != PLATFORM_GO)
        new ActionStep {
            name = "Render endpoint.sh"
            uses = RENDER_TEMPLATE_ACTION
            env = new Mapping {
                ["call"] = platformCalls[platform]
            }
            with = new Mapping {
                ["template-file"] = "templates/entrypoint.template.sh"
                ["output-file"] = "\(platform)/entrypoint.sh"
                ["engine"] = "mustache"
            }
        }
    else null
    if (platform != PLATFORM_GO)
        new CommandStep {
            name = "Make endpoint.sh executable"
            run = "chmod +x \(platform)/entrypoint.sh"
        }
    else null
}.toList().filterNonNull().toListing()