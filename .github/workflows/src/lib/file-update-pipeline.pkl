open module update_pipeline
extends "package://github.com/emilymclean/pkl-github-actions/releases/download/v0.1.0-alpha.96/pkl-github-actions@0.1.0-alpha.96#/actions.pkl"
import "base.pkl"

hidden represents: String
hidden repo: String

hidden versionJobName = "get-current-version"

hidden currentVersionStep: Step
hidden currentVersionOutputVar: String
hidden updateStep: Function1<String, Step>

local checkout = new ActionStep {
    uses = "actions/checkout@v3"
    with = new Mapping {
        ["fetch-depth"] = 0
    }
}

name = "Update build to include the latest \(represents) releases"

on = new On {
    workflow_dispatch = new WorkflowDispatch {}
    schedule = new Listing {
        new Schedule {
            cron = "0 13 * * 1"
        }
    }
    pull_request = new PullRequest {
        branches = new Listing {
            "main"
            "develop"
        }
    }
}

jobs = new Mapping {
    [versionJobName] = new Job {
        outputs = new Mapping {
            ["current-version"] = "${{ env.\(currentVersionOutputVar) }}"
            ["latest-version"] = "${{ steps.tool-release.outputs.release }}"
        }
        steps = new Listing {
            checkout
            currentVersionStep
            new ActionStep {
                name = "Get latest \(represents) version"
                id = "tool-release"
                uses = "pozetroninc/github-action-get-latest-release@master"
                with = new Mapping {
                    ["owner"] = "apple"
                    ["repo"] = repo
                    ["excludes"] = "prerelease, draft"
                }
            }
            new CommandStep {
                name = "Job Summary"
                run = """
                echo "### Versions" >> $GITHUB_STEP_SUMMARY
                echo "Current version: ${{ env.\(currentVersionOutputVar) }}" >> $GITHUB_STEP_SUMMARY
                echo "Latest version: ${{ steps.pkl-release.outputs.release }}" >> $GITHUB_STEP_SUMMARY
                """
            }
        }
    }
    ["update-\(represents)-version"] = new Job {
        needs = new Listing {
            versionJobName
        }
        `if` = "needs.\(versionJobName).outputs.current-version != needs.\(versionJobName).outputs.latest-version && github.event_name != 'pull_request'"
        permissions = new Mapping {
            ["contents"] = "write"
            ["pull-requests"] = "write"
        }
        steps = new Listing {
            checkout
            updateStep.apply("${{ needs.get-current-version.outputs.latest-version }}")
            new ActionStep {
                name = "Setup node for gomplate"
                uses = "actions/setup-node@v4"
            }
            new CommandStep {
                name = "Update README and entrypoints"
                run = """
                npm install -g gomplate
                ./render-templates.sh
                """
            }
            new ActionStep {
                name = "Create Pull Request"
                uses = "peter-evans/create-pull-request@v7"
                with = new Mapping {
                    ["branch"] = "update-\(represents)/feature/${{ needs.\(versionJobName).outputs.latest-version }}-pkl-lang"
                    ["title"] = "Update \(represents) from ${{ needs.\(versionJobName).outputs.current-version }} to ${{ needs.\(versionJobName).outputs.latest-version }}"
                    ["assignees"] = "emilymclean"
                    ["reviewers"] = "emilymclean"
                    ["draft"] = "always-true"
                    ["token"] = "${{ secrets.WORKER_PAT }}"
                }
            }
        }
    }
    ["keep-alive"] = new Job {
        `if` = "github.event_name == 'schedule'"
        permissions = new Mapping {
            ["actions"] = "write"
        }
        steps = new Listing {
            new ActionStep {
                uses = "liskin/gh-workflow-keepalive@v1"
            }
        }
    }
}